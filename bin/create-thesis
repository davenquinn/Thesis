#!/usr/bin/env zsh

# https://stmorse.github.io/journal/Thesis-writeup.html

# First we link to the text that comprises each standalone
# chapter. (Note: we assume that the bibliography in each chapter
# is complete and don't try to add to it ourselves)

# Accept argument --force to force rebuild

[[ $1 != '--force' ]]; force=$?
(( $force )) && shift && echo "Forcing rebuild due to \`--force\` flag"

#[[ $1 == '--no-rebuild-bib']] && echo "No rebuild bib"

function check-changes {
  # Check for changes between a hash file and a hash
  [[ $1 != '--write' ]]; _write=$?
  (($_write)) && shift
  hashfile=$1
  _hash=$2
  [[ -f "$hashfile" ]] && [[ $(cat $hashfile) == $_hash ]] && (( !$force ))
  output=$?
  # Write hash to file for further changes
  (($_write)) && echo $_hash > $hashfile
  return $output
}

cd $PROJECT_DIR

# Use local python modules
export PYTHONPATH="paper-components/modules:$PYTHONPATH"

source paper-components/defs.zsh

G="\e[32m"
N="\e[0m"
R="\e[31m"
P="\e[0;34m"
BP="\e[1;94m"
BG="\e[1;92m"

function step {
  echo "$P...$@"$N
}

function directory-hash {
  gfind $@ -maxdepth 2 -type d -printf "%p %TY-%Tm-%Td %TH:%TM:%TS %Tz" | md5sum
}

echo $BP"BUILD CHAPTERS"$N
# First get chapter text into latex format
for chapter in chapters/*; do
  name=${chapter:t:r}
  # Skip non-directories
  if [[ ! -d $chapter ]]; then
    # Continue unless markdown
    [[ ${chapter:e} != "md" ]] && continue
  fi
  echo "$BG"$name$N
  build=build/$name
  includes=$build/includes
  captions=$build/captions.tex
  # Appendices
  appendices=($chapter/appendices/*.md(N))
  hashfile="$build/.modification-hash"

  mkdir -p $build

  # Get the directory from which included files should be sourced from
  eval include_dir="$(cat chapters/include-directories.json | jq ".[\"$name\"]")"

  if [[ -d $include_dir ]]; then
    function process-text {
      aggregate-text $@ \
      | mark-inline-figures \
      | text-pipeline \
      | implicit-introduction \
      | figurator inline \
        $chapter/includes.yaml \
        --template-dir paper-components/includes \
        --captions $captions \
        --collect-dir $includes
    }

    _hash=$(directory-hash $chapter $include_dir)

  else
    function process-text {
      aggregate-text $@ \
      | text-pipeline \
      | implicit-introduction
    }
    _hash=$(cat $chapter | md5sum)
  fi

  if $(check-changes --write $hashfile $_hash) ; then
    echo "No changes"
    continue
  fi

  if [[ -d $include_dir ]]; then
    echo "Copying figures and tables from $G$include_dir$N"
    rsync -a --delete $include_dir/ $includes
  else
    if [[ $include_dir != null ]]; then
      echo "\e[0;31mCould not find include directory$N$include_dir"
    else
      echo "\e[0;31mNo include directory specified$N"
    fi
    echo "   (figures and tables will not print)"
  fi

  if [[ -d $chapter ]]; then
    step "building template"
    cp source/chapter-template.tex "$build/main.tex"
    (( ${#appendices} > 0 )) && cat source/appendices-shim.tex >> $build/main.tex
    echo "\\cleardoublepage" >> $build/main.tex
    # Replace template variables
    sed -i 's|\\$build|'"$build"'|' $build/main.tex

    step "copying title block and references"
    cp $chapter/title-block.tex $chapter/references.bib $build

    sed -i 's/, Pasadena, California, USA//g' $build/title-block.tex

    step "building abstract"
    cat $chapter/abstract.md \
    | text-pipeline \
    > $build/abstract.tex

    step "building figure captions"
    cat $chapter/figure-captions.md \
    | text-pipeline \
    > $captions

    step "building main text"
    process-text $chapter/chapters/*.md > $build/body.tex

    if (( ${#appendices} > 0 )); then
      step "building appendices"
      process-text ${appendices} > $build/appendices.tex
    fi
  else
    step "building main text"
    process-text $chapter > $build/main.tex
  fi
done

echo "\n"$BP"BUILD THESIS"$N
texfile=build/main.tex
preamble="build/preamble.tex"
cp thesis-template/* build
cp source/main.tex $texfile
cat "source/preamble"/*.tex > $preamble
step "building template"


step "running latex in draft mode"
run-latex-draft $texfile build/Daven-Quinn-thesis-draft.pdf > "build/latex-draft.log" 2>&1

function filter-bib {
  bibfile=$2
  auxfile=$1
  hashfile="${auxfile}.hash"
  _hash=$(cat $auxfile | md5sum)
  if $(check-changes $hashfile $_hash); then
    echo "   No changes"
    return
  fi

  if [[ ! -v BIBTEX_LIBRARY ]]; then
    echo "$R   \$BIBTEX_LIBRARY not set. Assuming that $bibfile contains correct references.$N"
    return
  fi
  res=$(bib-filter --clean \
    --aux $auxfile $BIBTEX_LIBRARY $bibfile | wc -w)
  echo "$R   $res references written to $bibfile"$N
}

step "filtering bibliography"
# Combined aux file for unmanaged chapters
combined_auxfile=build/combined.aux
touch $combined_auxfile
for chapter in chapters/*; do
  [[ -f $chapter ]] && [[ ${chapter:e} != 'md' ]] && continue
  name=${chapter:t:r}
  auxfile=build/$name/main.aux
  if [[ -f $chapter ]]; then
    cat $auxfile >> $combined_auxfile
    continue
  fi

  # Do the following for a chapter that maintains its own internal reference list
  echo $BG"   $name"$N
  bibfile=$chapter/references.bib
  [[ -f $bibfile ]] && filter-bib $auxfile $bibfile
done

if [[ -n $combined_auxfile ]]; then
  echo $BG"   combined remaining chapters"$N
  filter-bib $combined_auxfile chapters/references.bib
  cp chapters/references.bib build/references.bib
fi
rm -f $combined_auxfile

step "running bibtex"
for auxfile in build/*/main.aux; do
  name=${auxfile:h:t}
  hashfile="${auxfile}.hash"
  _hash=$(cat $auxfile | md5sum)
  if $(check-changes --write $hashfile $_hash); then
    echo "   $BG"$name"$N (no changes)"
    continue
  fi
  echo $BG"   $name"$N
  bibtex $auxfile > /dev/null 2>&1
done

step "creating pdf"
run-latex $texfile build/Daven-Quinn-thesis-draft.pdf > "build/latex-final.log" 2>&1

